name: 'gostyle-action'
description: 'Run gostyle'
inputs:
  go-version-input:
    description: 'Version of Go to use for gostyle'
    required: false
  check-latest:
    description: 'Set this option to true if you want the action to always check for the latest available Go version that satisfies the version spec'
    required: false
    default: false
  cache:
    description: 'Used to specify whether Go caching is needed. Set to true, if you would like to enable caching.'
    required: false
    default: true
  go-package:
    description: 'Go Package to scan with gostyle'
    required: false
    default: './...'
  work-dir:
    description: 'Directory in which to run gostyle'
    required: false
    default: ''
  repo-checkout:
    description: "Checkout the repository"
    required: false
    default: false
  go-version-file:
    description: 'Path to the go.mod or go.work file.'
    required: false
  config-file:
    description: 'Config file path for gostyle.'
    required: false
    default: ''
  args:
    description: 'Args for gostyle'
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    - if: inputs.repo-checkout != 'false' # only explicit false prevents repo checkout
      uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: ${{ inputs.go-version-input }}
        check-latest: ${{ inputs.check-latest }}
        go-version-file: ${{ inputs.go-version-file }}
        cache: ${{ inputs.cache }}
    - name: Install gostyle
      run: go install github.com/k1LoW/gostyle@latest
      shell: bash
    - name: Set package
      id: package
      run: |
        if [ -z "${{ inputs.work-dir }}" ]; then echo "PACKAGE=${{ inputs.go-package }}" >> "$GITHUB_OUTPUT"; fi
        if [ -n "${{ inputs.work-dir }}" ]; then echo "PACKAGE=${{ inputs.work-dir }}/${{ inputs.go-package }}" >> "$GITHUB_OUTPUT"; fi
      shell: bash
    - name: Set args
      id: args
      run: |
        if [ -z "${{ inputs.config-file }}" ]; then echo "ARGS=${{ inputs.args }}" >> "$GITHUB_OUTPUT"; fi
        if [ -n "${{ inputs.config-file }}" ] && [ -z "${{ inputs.work-dir }}" ]; then echo "ARGS=-gostyle.config=${PWD}/${{ inputs.config-file }}" >> "$GITHUB_OUTPUT"; fi
        if [ -n "${{ inputs.config-file }}" ] && [ -n "${{ inputs.work-dir }}" ]; then echo "ARGS=-gostyle.config=${PWD}/${{ inputs.work-dir }}/${{ inputs.config-file }}" >> "$GITHUB_OUTPUT"; fi
      shell: bash
    - name: Run gostyle
      run: go vet -vettool=`which gostyle` ${{ steps.args.outputs.ARGS }} ${{ steps.package.outputs.PACKAGE }}
      shell: bash
